"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSyncLanguage = void 0;
var react_i18next_1 = require("react-i18next");
var react_1 = require("react");
/**
 * `useSyncLanguage` can be used when not leveraging next.js' localized routes.
 * It will make sure to set the `current language` properly in `i18next` based
 * on the language parameter you pass to it.
 *
 * Note that this can cause an error when rendering on the server. This happens
 * because `useTranslation` returns a Suspense. To fix it, either enable react
 * Suspense Mode, or set `react.useSuspense = false` in your `ni18n-options.ts`
 *
 * @param language The language the translations should be in
 * @returns an i18n instance
 */
var useSyncLanguage = function (language) {
    var i18n = (0, react_i18next_1.useTranslation)().i18n;
    (0, react_1.useEffect)(function () {
        if (i18n.language !== language)
            i18n.changeLanguage(language);
    }, [language, i18n]);
    return { i18n: i18n };
};
exports.useSyncLanguage = useSyncLanguage;
